<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to You under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>io.github.maropu</groupId>
  <artifactId>jvmci-test</artifactId>
  <version>0.1.0</version>
  <packaging>jar</packaging>
  <name>JVMCI Test</name>
  <description>JVMCI tests</description>
  <url>https://github.com/maropu/jvmci-test</url>

  <scm>
    <url>https://github.com/maropu/jvmci-test.git</url>
    <connection>scm:git:git://github.com/maropu/jvmci-test.git</connection>
    <developerConnection>scm:git:git@github.com:maropu/jvmci-test.git</developerConnection>
    <tag>HEAD</tag>
  </scm>

  <developers>
    <developer>
      <email>yamamuro@apache.org</email>
      <name>Takeshi Yamamuro</name>
      <url>https://github.com/maropu</url>
      <id>maropu</id>
    </developer>
  </developers>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <llvm.version>7.0.1</llvm.version>
    <java.version>11</java.version>
    <scala.version>2.12.10</scala.version>
    <scala.binary.version>2.12</scala.binary.version>
    <maven.version>3.6.2</maven.version>
    <snappy.version>1.1.2.6</snappy.version>
    <janino.version>3.0.0</janino.version>
    <jmh.version>1.19</jmh.version>
    <scalatest.version>3.0.5</scalatest.version>

    <test.java.home>${java.home}</test.java.home>
    <test.exclude.tags></test.exclude.tags>

    <MetaspaceSize>64m</MetaspaceSize>
    <MaxMetaspaceSize>512m</MaxMetaspaceSize>
    <CodeCacheSize>512m</CodeCacheSize>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.xerial.snappy</groupId>
      <artifactId>snappy-java</artifactId>
      <version>${snappy.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.openjdk.jmh</groupId>
      <artifactId>jmh-core</artifactId>
      <version>${jmh.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.openjdk.jmh</groupId>
      <artifactId>jmh-generator-annprocess</artifactId>
      <version>${jmh.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.codehaus.janino</groupId>
      <artifactId>janino</artifactId>
      <version>${janino.version}</version>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
      <version>${scala.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.scalatest</groupId>
      <artifactId>scalatest_${scala.binary.version}</artifactId>
      <version>${scalatest.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <directory>target</directory>
    <outputDirectory>target/classes</outputDirectory>
    <finalName>${project.artifactId}-${project.version}</finalName>
    <testOutputDirectory>target/scala-${scala.binary.version}/test-classes</testOutputDirectory>

    <sourceDirectory>src/main/java</sourceDirectory>
    <testSourceDirectory>src/test/scala</testSourceDirectory>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>1.4.1</version>
        <executions>
          <execution>
            <id>enforce-versions</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireMavenVersion>
                  <version>${maven.version}</version>
                </requireMavenVersion>
                <requireJavaVersion>
                  <version>${java.version}</version>
                </requireJavaVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>net.alchim31.maven</groupId>
        <artifactId>scala-maven-plugin</artifactId>
        <version>3.2.2</version>
        <executions>
          <execution>
            <id>eclipse-add-source</id>
            <goals>
              <goal>add-source</goal>
            </goals>
          </execution>
          <execution>
            <id>scala-compile-first</id>
            <phase>process-resources</phase>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
          <execution>
            <id>scala-test-compile-first</id>
            <phase>process-test-resources</phase>
            <goals>
              <goal>testCompile</goal>
            </goals>
          </execution>
          <execution>
            <id>attach-scaladocs</id>
            <phase>verify</phase>
            <goals>
              <goal>doc-jar</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <scalaVersion>${scala.version}</scalaVersion>
          <recompileMode>incremental</recompileMode>
          <useZincServer>true</useZincServer>
          <args>
            <arg>-unchecked</arg>
            <arg>-deprecation</arg>
            <arg>-feature</arg>
          </args>
          <jvmArgs>
            <jvmArg>-Xms1024m</jvmArg>
            <jvmArg>-Xmx1024m</jvmArg>
            <jvmArg>-XX:MetaspaceSize=${MetaspaceSize}</jvmArg>
            <jvmArg>-XX:MaxMetaspaceSize=${MaxMetaspaceSize}</jvmArg>
            <jvmArg>-XX:ReservedCodeCacheSize=${CodeCacheSize}</jvmArg>
          </jvmArgs>
          <javacArgs>
            <javacArg>-source</javacArg>
            <javacArg>${java.version}</javacArg>
            <javacArg>-target</javacArg>
            <javacArg>${java.version}</javacArg>
            <javacArg>-Xlint:all,-serial,-path</javacArg>
            <!-- For JVMCI options -->
            <javacArg>--add-modules</javacArg>
            <javacArg>jdk.internal.vm.ci</javacArg>
            <javacArg>--add-modules</javacArg>
            <javacArg>jdk.internal.vm.compiler</javacArg>
            <javacArg>--add-exports</javacArg>
            <javacArg>jdk.internal.vm.ci/jdk.vm.ci.meta=ALL-UNNAMED</javacArg>
            <javacArg>--add-exports</javacArg>
            <javacArg>jdk.internal.vm.ci/jdk.vm.ci.code=ALL-UNNAMED</javacArg>
            <javacArg>--add-exports</javacArg>
            <javacArg>jdk.internal.vm.ci/jdk.vm.ci.code.site=ALL-UNNAMED</javacArg>
            <javacArg>--add-exports</javacArg>
            <javacArg>jdk.internal.vm.ci/jdk.vm.ci.runtime=ALL-UNNAMED,jdk.internal.vm.compiler</javacArg>
            <javacArg>--add-exports</javacArg>
            <javacArg>jdk.internal.vm.ci/jdk.vm.ci.hotspot=ALL-UNNAMED,jdk.internal.vm.compiler</javacArg>
            <javacArg>--add-exports</javacArg>
            <javacArg>jdk.internal.vm.ci/jdk.vm.ci.amd64=ALL-UNNAMED</javacArg>
            <javacArg>--add-exports</javacArg>
            <javacArg>jdk.internal.vm.compiler/org.graalvm.compiler.api.runtime=ALL-UNNAMED</javacArg>
            <javacArg>--add-exports</javacArg>
            <javacArg>jdk.internal.vm.compiler/org.graalvm.compiler.hotspot=ALL-UNNAMED</javacArg>
          </javacArgs>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
          <encoding>UTF-8</encoding>
          <maxmem>1024m</maxmem>
          <fork>true</fork>
          <compilerArgs>
            <arg>--add-modules</arg>
            <arg>jdk.internal.vm.ci</arg>
            <arg>--add-modules</arg>
            <arg>jdk.internal.vm.compiler</arg>
            <arg>--add-exports</arg>
            <arg>jdk.internal.vm.ci/jdk.vm.ci.meta=ALL-UNNAMED</arg>
            <arg>--add-exports</arg>
            <arg>jdk.internal.vm.ci/jdk.vm.ci.code=ALL-UNNAMED</arg>
            <arg>--add-exports</arg>
            <arg>jdk.internal.vm.ci/jdk.vm.ci.code.site=ALL-UNNAMED</arg>
            <arg>--add-exports</arg>
            <arg>jdk.internal.vm.ci/jdk.vm.ci.runtime=ALL-UNNAMED,jdk.internal.vm.compiler</arg>
            <arg>--add-exports</arg>
            <arg>jdk.internal.vm.ci/jdk.vm.ci.hotspot=ALL-UNNAMED,jdk.internal.vm.compiler</arg>
            <arg>--add-exports</arg>
            <arg>jdk.internal.vm.ci/jdk.vm.ci.amd64=ALL-UNNAMED</arg>
            <arg>--add-exports</arg>
            <arg>jdk.internal.vm.compiler/org.graalvm.compiler.api.runtime=ALL-UNNAMED</arg>
            <arg>--add-exports</arg>
            <arg>jdk.internal.vm.compiler/org.graalvm.compiler.hotspot=ALL-UNNAMED</arg>
            <arg>-Xlint:all,-serial,-path</arg>
          </compilerArgs>
        </configuration>
      </plugin>
      <!-- Scalatest runs all Scala tests -->
      <plugin>
        <groupId>org.scalatest</groupId>
        <artifactId>scalatest-maven-plugin</artifactId>
        <version>1.0</version>
        <!-- Note config is repeated in surefire config -->
        <configuration>
          <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
          <junitxml>.</junitxml>
          <!-- <argLine>-ea -Xmx3g -XX:MaxMetaspaceSize=${MaxMetaspaceSize} -XX:ReservedCodeCacheSize=${CodeCacheSize}</argLine> -->
          <argLine>--add-modules jdk.internal.vm.ci --add-modules jdk.internal.vm.compiler --add-exports jdk.internal.vm.ci/jdk.vm.ci.meta=ALL-UNNAMED --add-exports jdk.internal.vm.ci/jdk.vm.ci.code=ALL-UNNAMED --add-exports jdk.internal.vm.ci/jdk.vm.ci.code.site=ALL-UNNAMED --add-exports jdk.internal.vm.ci/jdk.vm.ci.runtime=ALL-UNNAMED,jdk.internal.vm.compiler --add-exports jdk.internal.vm.ci/jdk.vm.ci.hotspot=ALL-UNNAMED,jdk.internal.vm.compiler --add-exports jdk.internal.vm.ci/jdk.vm.ci.amd64=ALL-UNNAMED --add-exports jdk.internal.vm.compiler/org.graalvm.compiler.api.runtime=ALL-UNNAMED --add-exports jdk.internal.vm.compiler/org.graalvm.compiler.hotspot=ALL-UNNAMED --add-opens jdk.internal.vm.ci/jdk.vm.ci.hotspot=ALL-UNNAMED -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -Xmx3g -Xss4096k -XX:MaxMetaspaceSize=${MaxMetaspaceSize} -XX:ReservedCodeCacheSize=512m</argLine>
          <stderr/>
          <environmentVariables>
            <JVMCI_SCALA_VERSION>${scala.binary.version}</JVMCI_SCALA_VERSION>
            <JVMCI_TESTING>1</JVMCI_TESTING>
            <JAVA_HOME>${test.java.home}</JAVA_HOME>
          </environmentVariables>
          <systemProperties>
            <log4j.configuration>file:src/test/resources/log4j.properties</log4j.configuration>
            <derby.system.durability>test</derby.system.durability>
            <java.awt.headless>true</java.awt.headless>
            <java.io.tmpdir>${project.build.directory}/tmp</java.io.tmpdir>
            <jvmci.testing>1</jvmci.testing>
          </systemProperties>
          <tagsToExclude>${test.exclude.tags}</tagsToExclude>
        </configuration>
        <executions>
          <execution>
            <id>test</id>
            <goals>
              <goal>test</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.2.1</version>
          <executions>
            <execution>
            <id>jar-with-dependencies</id>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <finalName>${project.artifactId}_${project.version}-with-dependencies</finalName>
              <outputDirectory>${project.parent.build.directory}</outputDirectory>
              <minimizeJar>false</minimizeJar>
              <createDependencyReducedPom>false</createDependencyReducedPom>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <mainClass>org.openjdk.jmh.Main</mainClass>
                </transformer>
              </transformers>
              <filters>
                <filter>
                  <artifact>*:*</artifact>
                  <excludes>
                    <exclude>META-INF/*.SF</exclude>
                    <exclude>META-INF/*.DSA</exclude>
                    <exclude>META-INF/*.RSA</exclude>
                  </excludes>
                </filter>
              </filters>
              <artifactSet>
                <includes></includes>
              </artifactSet>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>

